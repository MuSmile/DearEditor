cmake_minimum_required(VERSION 3.16)
cmake_policy(VERSION 3.16)

# Enable policy to not use RPATH settings for install_name on macOS.
# if(POLICY CMP0068)
#   cmake_policy(SET CMP0068 NEW)
# endif()

# Enable policy to run automoc on generated files.
if(POLICY CMP0071)
  cmake_policy(SET CMP0071 NEW)
endif()


# ================================ General configuration ======================================


project(PySide6QtAds)

# Find Python
find_package(Python3 REQUIRED COMPONENTS Interpreter Development)

if(NOT python_interpreter)
    find_program(python_interpreter "python")
endif()
message(STATUS "Using python: ${python_interpreter}")

# Find the required Qt packages
find_package(QT NAMES Qt6 Qt5 COMPONENTS Core REQUIRED)
find_package(Qt${QT_VERSION_MAJOR} 5.5 COMPONENTS Core Gui Widgets REQUIRED)

# Set CPP standard to C++11 minimum.
set(CMAKE_CXX_STANDARD 11)

# The C++ project library for which we will create bindings.
set(qtads_subdir "Qt-Advanced-Docking-System")
set(qtads_dir ${CMAKE_CURRENT_SOURCE_DIR}/${qtads_subdir})
add_subdirectory(${qtads_subdir})
set(project_library "qtadvanceddocking")

# The name of the generated bindings module (as imported in Python).
set(bindings_library "PySide6QtAds")

# The header file with all the types and functions for which bindings will be generated.
# Usually it simply includes other headers of the library you are creating bindings for.
set(wrapped_header ${CMAKE_CURRENT_SOURCE_DIR}/src/bindings.h)

# The typesystem xml file which defines the relationships between the C++ types / functions
# and the corresponding Python equivalents.
set(typesystem_file ${CMAKE_CURRENT_SOURCE_DIR}/src/bindings.xml)

# Specify which C++ files will be generated by shiboken. This includes the module wrapper
# and a '.cpp' file per C++ type. These are needed for generating the module shared
# library.
set(generated_sources    
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CAutoHideDockContainer_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CAutoHideSideBar_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CAutoHideTab_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CDockAreaTabBar_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CDockAreaTitleBar_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CTitleBarButton_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CSpacerWidget_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CDockAreaWidget_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CDockComponentsFactory_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CDockContainerWidget_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CDockFocusController_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CDockManager_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CDockOverlay_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CDockOverlayCross_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CDockSplitter_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CDockWidget_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CDockWidgetTab_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CElidingLabel_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CFloatingDockContainer_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_IFloatingWidget_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CFloatingDragPreview_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CIconProvider_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CPushButton_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_CResizeHandle_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_module_wrapper.cpp
    )


# ================================== Shiboken detection ======================================


# Macro to get various pyside / python include / link flags and paths.
# Uses the not entirely supported utils/pyside_config.py file.
macro(pyside_config option output_var)
    if(${ARGC} GREATER 2)
        set(is_list ${ARGV2})
    else()
        set(is_list "")
    endif()

    execute_process(
      COMMAND ${python_interpreter} "${CMAKE_CURRENT_SOURCE_DIR}/pyside_config.py"
              ${option}
      OUTPUT_VARIABLE ${output_var}
      OUTPUT_STRIP_TRAILING_WHITESPACE)

    if ("${${output_var}}" STREQUAL "")
        message(FATAL_ERROR "Error: Calling ${python_interpreter} ${CMAKE_CURRENT_SOURCE_DIR}/pyside_config.py ${option} returned no output.")
    endif()
    if(is_list)
        string (REPLACE " " ";" ${output_var} "${${output_var}}")
    endif()
endmacro()

# Query for the shiboken generator path, Python path, include paths and linker flags.
pyside_config(--shiboken-module-path shiboken_module_path)
pyside_config(--shiboken-generator-path shiboken_generator_path)
pyside_config(--pyside-path pyside_path)
pyside_config(--pyside-include-path pyside_include_dir 1)
pyside_config(--python-include-path python_include_dir)
pyside_config(--shiboken-generator-include-path shiboken_include_dir 1)
pyside_config(--shiboken-module-shared-libraries-cmake shiboken_shared_libraries 0)
pyside_config(--python-link-flags-cmake python_linking_data 0)
pyside_config(--pyside-shared-libraries-cmake pyside_shared_libraries 0)

set(shiboken_path "${shiboken_generator_path}/shiboken6${CMAKE_EXECUTABLE_SUFFIX}")
if(NOT EXISTS ${shiboken_path})
    message(FATAL_ERROR "Shiboken executable not found at path: ${shiboken_path}")
endif()


# ==================================== RPATH configuration ====================================


set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) # was true

SET(CMAKE_BUILD_RPATH_USE_ORIGIN TRUE)
SET(MACOSX_RPATH TRUE)
SET(CMAKE_INSTALL_RPATH ${shiboken_module_path} "${CMAKE_INSTALL_PREFIX}/lib")
# set(CMAKE_INSTALL_RPATH ${shiboken_module_path} ${CMAKE_INSTALL_LIBDIR})

set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)



# ============================== Qt Includes for project_library ==============================


# Get the relevant Qt include dirs, to pass them on to shiboken.
set(QT_INCLUDE_DIR "")
get_target_property(QT_INCLUDE_DIR_LIST Qt6::Core INTERFACE_INCLUDE_DIRECTORIES)
foreach(_Q ${QT_INCLUDE_DIR_LIST})
    if(NOT "${_Q}" MATCHES "QtCore$")
        set(QT_INCLUDE_DIR "${_Q}")
    endif()
endforeach()
if(QT_INCLUDE_DIR STREQUAL "")
    message(FATAL_ERROR "Unable to obtain the Qt include directory")
endif()

set(QT_INCLUDES "")
list(APPEND QT_INCLUDES "-I${QT_INCLUDE_DIR}")

get_property(QT_GUI_INCLUDE_DIRS TARGET Qt6::Gui PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
foreach(INCLUDE_DIR ${QT_GUI_INCLUDE_DIRS})
    list(APPEND QT_INCLUDES "-I${INCLUDE_DIR}")
endforeach()

get_property(QT_WIDGETS_INCLUDE_DIRS TARGET Qt6::Widgets PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
foreach(INCLUDE_DIR ${QT_WIDGETS_INCLUDE_DIRS})
    list(APPEND QT_INCLUDES "-I${INCLUDE_DIR}")
endforeach()

# Check if Qt is a framework build on macOs. This affects how include paths should be handled.
get_target_property(QtCore_is_framework Qt6::Core FRAMEWORK)
if (QtCore_is_framework)
    # Get the path to the Qt framework dir.
    set(QT_FRAMEWORK_INCLUDE_DIR "${QT6_INSTALL_PREFIX}/${QT6_INSTALL_LIBS}")
    message(STATUS "*** QT_FRAMEWORK_INCLUDE_DIR is ${QT_FRAMEWORK_INCLUDE_DIR}")
    list(APPEND QT_INCLUDES "--framework-include-paths=${QT_FRAMEWORK_INCLUDE_DIR}")

else()
    get_property(QT_CORE_INCLUDE_DIRS TARGET Qt6::Core PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
    foreach(INCLUDE_DIR ${QT_CORE_INCLUDE_DIRS})
        list(APPEND QT_INCLUDES "-I${INCLUDE_DIR}")
    endforeach()
endif()

# We need to include the headers for the module bindings that we use.
set(pyside_additional_includes "")
foreach(INCLUDE_DIR ${pyside_include_dir})
    list(APPEND pyside_additional_includes "${INCLUDE_DIR}/QtCore")
    list(APPEND pyside_additional_includes "${INCLUDE_DIR}/QtGui")
    list(APPEND pyside_additional_includes "${INCLUDE_DIR}/QtWidgets")
endforeach()


# ====================== Shiboken target for generating binding C++ files  ====================


# Set up the options to pass to shiboken.
set(shiboken_options --generator-set=shiboken --enable-parent-ctor-heuristic
    --enable-pyside-extensions --enable-return-value-heuristic --use-isnull-as-nb_nonzero
    --avoid-protected-hack
    ${QT_INCLUDES}
    -I${qtads_dir}/src
    -T${CMAKE_CURRENT_SOURCE_DIR}
    -T${pyside_path}/typesystems
    --output-directory=${CMAKE_CURRENT_BINARY_DIR}
    )

set(generated_sources_dependencies ${wrapped_header} ${typesystem_file})

# Add custom target to run shiboken to generate the binding cpp files.
add_custom_command(OUTPUT ${generated_sources}
                    COMMAND ${shiboken_path}
                    ${shiboken_options} ${wrapped_header} ${typesystem_file}
                    DEPENDS ${generated_sources_dependencies}
                    IMPLICIT_DEPENDS CXX ${wrapped_header}
                    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                    COMMENT "Running generator for ${typesystem_file}.")


# =============================== CMake target - bindings_library =============================


# Set the cpp files which will be used for the bindings library.
set(${bindings_library}_sources ${generated_sources})

# Define and build the bindings library.
add_library(${bindings_library} MODULE ${${bindings_library}_sources})

# Apply relevant include and link flags.
target_include_directories(${bindings_library} PRIVATE ${pyside_additional_includes})
target_include_directories(${bindings_library} PRIVATE ${pyside_include_dir})
target_include_directories(${bindings_library} PRIVATE ${python_include_dir})
target_include_directories(${bindings_library} PRIVATE ${shiboken_include_dir})
target_include_directories(${bindings_library} PRIVATE "${CMAKE_SOURCE_DIR}/src")

target_link_libraries(${bindings_library} PRIVATE Qt6::Widgets)
target_link_libraries(${bindings_library} PRIVATE ${project_library})
target_link_libraries(${bindings_library} PRIVATE ${pyside_shared_libraries})
target_link_libraries(${bindings_library} PRIVATE ${shiboken_shared_libraries})


# Adjust the name of generated module.
set_property(TARGET ${bindings_library} PROPERTY PREFIX "")
set_property(TARGET ${bindings_library} PROPERTY OUTPUT_NAME
             "${bindings_library}${PYTHON_EXTENSION_SUFFIX}")
if(WIN32)
    set_property(TARGET ${bindings_library} PROPERTY SUFFIX ".pyd")
endif()

# Make sure the linker doesn't complain about not finding Python symbols on macOS.
if(APPLE)
  set_target_properties(${bindings_library} PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
endif(APPLE)

# Find and link to the python import library only on Windows.
# On Linux and macOS, the undefined symbols will get resolved by the dynamic linker
# (the symbols will be picked up in the Python executable).
if (WIN32)
    list(GET python_linking_data 0 python_libdir)
    list(GET python_linking_data 1 python_lib)
    find_library(python_link_flags ${python_lib} PATHS ${python_libdir} HINTS ${python_libdir})
    target_link_libraries(${bindings_library} PRIVATE ${python_link_flags})
endif()


# ================================= Dubious deployment section ================================


set(windows_shiboken_shared_libraries)

if(WIN32)
    # =========================================================================================
    # !!! (The section below is deployment related, so in a real world application you will
    # want to take care of this properly (this is simply to eliminate errors that users usually
    # encounter.
    # =========================================================================================
    # Circumvent some "#pragma comment(lib)"s in "include/pyconfig.h" which might force to link
    # against a wrong python shared library.

    set(python_versions_list 3 36 37 38 39)
    set(python_additional_link_flags "")
    foreach(ver ${python_versions_list})
        set(python_additional_link_flags
            "${python_additional_link_flags} /NODEFAULTLIB:\"python${ver}_d.lib\"")
        set(python_additional_link_flags
            "${python_additional_link_flags} /NODEFAULTLIB:\"python${ver}.lib\"")
    endforeach()

    set_target_properties(${bindings_library}
                           PROPERTIES LINK_FLAGS "${python_additional_link_flags}")

    # Compile a list of shiboken shared libraries to be installed, so that
    # the user doesn't have to set the PATH manually to point to the PySide6 package.
    foreach(library_path ${shiboken_shared_libraries})
        string(REGEX REPLACE ".lib$" ".dll" library_path ${library_path})
        file(TO_CMAKE_PATH ${library_path} library_path)
        list(APPEND windows_shiboken_shared_libraries "${library_path}")
    endforeach()
    # =========================================================================================
    # !!! End of dubious section.
    # =========================================================================================
endif()

set(install_dest_dir ${CMAKE_CURRENT_SOURCE_DIR}/dist)
install(TARGETS ${bindings_library}
        LIBRARY DESTINATION ${install_dest_dir}
        RUNTIME DESTINATION ${install_dest_dir}
        )
install(TARGETS ${project_library}
        LIBRARY DESTINATION ${install_dest_dir}
        RUNTIME DESTINATION ${install_dest_dir}
        )
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/src/__init__.py
        DESTINATION ${install_dest_dir}
        )

# install(FILES ${windows_shiboken_shared_libraries} DESTINATION ${install_dest_dir})
